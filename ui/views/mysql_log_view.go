package views

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/go-mysql-org/go-mysql/mysql"
	"github.com/go-mysql-org/go-mysql/replication"
	_ "github.com/go-sql-driver/mysql"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/widget"
)

func MySQLLogView(configFile string, tableConfigFile string) fyne.CanvasObject {
	// UI ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á Log
	logText := widget.NewMultiLineEntry()
	logText.SetText("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MySQL...\n")
	logText.Wrapping = fyne.TextWrapWord
	logText.Disable() // ‚úÖ ‡πÉ‡∏ä‡πâ Disable() ‡πÅ‡∏ó‡∏ô SetReadOnly()

	// ‡πÅ‡∏™‡∏î‡∏á Log ‡∏ö‡∏ô UI
	appendLog := func(text string) {
		logText.SetText(logText.Text + text + "\n")
	}

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Goroutine ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô Binlog
	go func() {
		// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MySQL
		mysqlDSN := `root:5HAg3rWT#m@tcp(209.15.97.58:3306)/`
		db, err := sql.Open("mysql", mysqlDSN)
		if err != nil {
			appendLog(fmt.Sprintf("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MySQL: %v", err))
			return
		}
		//defer db.Close()

		// ‡∏î‡∏∂‡∏á Binlog ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
		var binlogFile string
		var binlogPos uint32
		err = db.QueryRow("SHOW MASTER STATUS").Scan(&binlogFile, &binlogPos)
		if err != nil {
			appendLog(fmt.Sprintf("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á Binlog ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: %v", err))
			return
		}

		appendLog(fmt.Sprintf("‚úÖ Binlog ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: %s, Position: %d", binlogFile, binlogPos))

		// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô Binlog
		cfg := replication.BinlogSyncerConfig{
			ServerID: 100, // ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö Server ID ‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Replication
			Flavor:   "mysql",
			Host:     "209.15.97.58",
			Port:     3306,
			User:     "root",
			Password: "5HAg3rWT#m",
		}

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á Binlog Syncer
		syncer := replication.NewBinlogSyncer(cfg)

		// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡πà‡∏≤‡∏ô Binlog ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
		streamer, err := syncer.StartSync(mysql.Position{Name: binlogFile, Pos: binlogPos})
		if err != nil {
			appendLog(fmt.Sprintf("‚ùå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Sync Binlog ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: %v", err))
			return
		}

		appendLog("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô MySQL Binlog ...")

		// ‡πÉ‡∏ä‡πâ context ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô Event
		ctx := context.Background()

		for {
			ev, err := streamer.GetEvent(ctx)
			if err != nil {
				appendLog(fmt.Sprintf("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô Binlog: %v", err))
				return
			}

			// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Event
			appendLog(fmt.Sprintf("üìå Event: %T", ev.Event))
		}
	}()

	// Return UI
	return container.NewVBox(
		widget.NewLabel("MySQL Binlog Viewer"),
		logText,
	)
}
